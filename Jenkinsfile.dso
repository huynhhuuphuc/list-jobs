pipeline {
    agent any

    environment {
        APP_NAME = "homeloan-cms-fe"

        DOCKER_IMAGE = "homeloan-cms-fe"

        SLACK_CHANNEL = "#cj5-notification"
        
        PROJECT_NAME = "cj5"

        GIT_COMMIT_HASH = sh(script: "printf \$(git log -n 1 --pretty=format:'%H' | cut -c 1-8 )", returnStdout: true)

    }

    tools {
        nodejs 'node-16'
    }

    options {
        timestamps()
    }

    stages {
        stage("install dependencies") {
            environment {
                CI = false
            }

            steps {
                configFileProvider([configFile(fileId: 'yarn-global-settings', targetLocation: '.yarnrc')]) {
                    sh "yarn"
                }
            }
        }

        stage("analyze") {
            when {
                not {
                    allOf {
                        branch 'master'
                        triggeredBy 'UserIdCause'
                    }
                }
            }

            tools {
                nodejs 'node-14'
            }

            environment {
                SONARQUBE_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
            }

            stages {
                stage("sonarqube") {
                    parallel {
                        stage('branch') {
                            when {
                                anyOf {
                                    branch 'master'
                                    branch 'develop'
                                    branch 'feature/*'
                                    branch 'release/*'
                                }
                            }

                            steps {
                                withSonarQubeEnv(installationName: 'sonarqube', credentialsId: 'rb-upl-svc-sonarqube') {
                                    sh "${SONARQUBE_HOME}/bin/sonar-scanner \
                                        -Dsonar.projectKey=${APP_NAME} \
                                        -Dsonar.projectName=${APP_NAME} \
                                        -Dsonar.branch.name=${env.BRANCH_NAME} \
                                    "
                                }
                            }
                        }

                        stage('pull request') {
                            when {
                                changeRequest()
                            }

                            steps {
                                withSonarQubeEnv(installationName: 'sonarqube', credentialsId: 'rb-upl-svc-sonarqube') {
                                    sh "${SONARQUBE_HOME}/bin/sonar-scanner \
                                        -Dsonar.projectKey=${APP_NAME} \
                                        -Dsonar.projectName=${APP_NAME} \
                                        -Dsonar.pullrequest.key=${env.CHANGE_ID} \
                                        -Dsonar.pullrequest.branch=${env.CHANGE_BRANCH} \
                                        -Dsonar.pullrequest.base=${env.CHANGE_TARGET} \
                                    "
                                }
                            }
                        }
                    }
                }
            }
        }

        stage("DEV & QA") {
            parallel {
                stage("DEV") {
                    when {
                        branch 'develop'
                        beforeAgent true
                    }

                    environment {
                        ENV_NAME = "dev"
                        DOCKER_REGISTRY_PROTOCOL = "https"
                        DOCKER_REGISTRY = "nexus-docker-msb-dev.df.msb.com.vn"
                        DOCKER_REGISTRY_CREDENTIALS = "rb-upl-svc-nexus-dev"
                        DOCKER_TAG = "${GIT_COMMIT_HASH}"
                        CI = false

                        SYFT_HOME = tool name: 'syft', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
                        SYFT_REPORT = "syft.cyclonedx"
                        DTRACK_API_KEY = credentials("rb-upl-svc-dtrack")
                    }

                    stages {
                        stage("build & package") {
                            steps {
                                sendSlackDeploymentNotification channel: env.SLACK_CHANNEL,
                                    environment: env.ENV_NAME,
                                    version: "${DOCKER_TAG}"

                                configFileProvider([configFile(fileId: 'npm-global-settings', targetLocation: '.npmrc')]) {
                                    sh "npm rebuild node-sass"
                                    sh "npm run build:dev"
                                }

                                script {
                                    docker.withRegistry("${DOCKER_REGISTRY_PROTOCOL}://${DOCKER_REGISTRY}", DOCKER_REGISTRY_CREDENTIALS) {
                                        image = docker.build("${DOCKER_REGISTRY}/${PROJECT_NAME}/${ENV_NAME}/${DOCKER_IMAGE}:${DOCKER_TAG}")
                                        image.push("${DOCKER_TAG}")
                                        image.push("${ENV_NAME}")
                                    }
                                }

                                // vulnerability scan
                                sh "${SYFT_HOME}/syft packages docker:${DOCKER_REGISTRY}/${PROJECT_NAME}/${ENV_NAME}/${DOCKER_IMAGE}:${DOCKER_TAG} -o cyclonedx > ${SYFT_REPORT}"
                            }

                            post {
                                success {
                                    dependencyTrackPublisher artifact: "${SYFT_REPORT}",
                                        projectName: "${DOCKER_IMAGE}",
                                        projectVersion: "${BRANCH_NAME}",
                                        dependencyTrackApiKey: env.DTRACK_API_KEY,
                                        synchronous: true
                                }
                            }
                        }
                    }

                    post {
                        always {
                            sendSlackDeploymentNotification channel: env.SLACK_CHANNEL,
                                environment: env.ENV_NAME,
                                version: "${DOCKER_TAG}"
                        }
                    }
                }

                stage("QA") {
                    when {
                        branch 'release/*'
                        beforeAgent true
                    }

                    environment {
                        ENV_NAME = "qa"
                        DOCKER_REGISTRY_PROTOCOL = "https"
                        DOCKER_REGISTRY = "nexus-docker-msb-dev.df.msb.com.vn"
                        DOCKER_REGISTRY_CREDENTIALS = "rb-upl-svc-nexus-dev"
                        DOCKER_TAG = "${GIT_COMMIT_HASH}"
                        CI = false
                    }

                    stages {
                        stage("build & package") {
                            steps {
                                sendSlackDeploymentNotification channel: env.SLACK_CHANNEL,
                                    environment: env.ENV_NAME,
                                    version: "${DOCKER_TAG}"

                                configFileProvider([configFile(fileId: 'npm-global-settings', targetLocation: '.npmrc')]) {
                                    sh "npm rebuild node-sass"
                                    sh "npm run build:qa"
                                }

                                script {
                                    docker.withRegistry("${DOCKER_REGISTRY_PROTOCOL}://${DOCKER_REGISTRY}", DOCKER_REGISTRY_CREDENTIALS) {
                                        image = docker.build("${DOCKER_REGISTRY}/${PROJECT_NAME}/${ENV_NAME}/${DOCKER_IMAGE}:${DOCKER_TAG}")
                                        image.push("${DOCKER_TAG}")
                                        image.push("${ENV_NAME}")
                                    }
                                }
                            }
                        }
                    }

                    post {
                        always {
                            sendSlackDeploymentNotification channel: env.SLACK_CHANNEL,
                                environment: env.ENV_NAME,
                                version: "${DOCKER_TAG}"
                        }
                    }
                }
            }
        }

        stage("deployment") {
            when {
                branch 'master'
                beforeAgent true
            }

            environment {
                DOCKER_REGISTRY = "nexus-docker-msb.df.msb.com.vn"
                DOCKER_REGISTRY_CREDENTIALS = "rb-upl-svc-nexus"
            }

            stages {

                stage('deploy') {
                    parallel {
                        stage('UAT') {
                            when {
                                branch 'master'
                                beforeAgent true
                            }

                            environment {
                                ENV_NAME = "uat"
                              	REGISTRY_ENV = "prod"
                                DOCKER_REGISTRY_PROTOCOL = "https"
                                DOCKER_REGISTRY = "nexus-docker-msb.df.msb.com.vn"
                                DOCKER_REGISTRY_CREDENTIALS = "rb-upl-svc-nexus"
                                DOCKER_TAG = "${GIT_COMMIT_HASH}"                              
                                CI = false

                                SYFT_HOME = tool name: 'syft', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
                                SYFT_REPORT = "syft.cyclonedx"
                                DTRACK_API_KEY = credentials("rb-upl-svc-dtrack")

                            }

                            stages {
                                stage('package') {
                                    steps {
                                        sendSlackDeploymentNotification channel: env.SLACK_CHANNEL,
                                            environment: env.ENV_NAME,
                                             version: "${DOCKER_TAG}"

                                configFileProvider([configFile(fileId: 'npm-global-settings', targetLocation: '.npmrc')]) {
                                    sh "npm rebuild node-sass"
                                    sh "npm run build:uat"
                                }
                                        script {
                                            docker.withRegistry("${DOCKER_REGISTRY_PROTOCOL}://${DOCKER_REGISTRY}", DOCKER_REGISTRY_CREDENTIALS) {
                                                image = docker.build("${DOCKER_REGISTRY}/${PROJECT_NAME}/${REGISTRY_ENV}/${DOCKER_IMAGE}:${DOCKER_TAG}")
                                                image.push("${DOCKER_TAG}")
                                                image.push("${ENV_NAME}")
                                            }
                                            // vulnerability scan
                                            sh "${SYFT_HOME}/syft packages docker:${DOCKER_REGISTRY}/${PROJECT_NAME}/${REGISTRY_ENV}/${DOCKER_IMAGE}:${DOCKER_TAG} -o cyclonedx > ${SYFT_REPORT}"
                                        }
                                    }

                                    post {
                                        success {
                                            dependencyTrackPublisher artifact: "${SYFT_REPORT}",
                                                projectName: "${DOCKER_IMAGE}",
                                                projectVersion: "${BRANCH_NAME}",
                                                dependencyTrackApiKey: env.DTRACK_API_KEY,
                                                synchronous: true
                                        }
                                    }
                                }
                            }

                            post {
                                always {
                                    sendSlackDeploymentNotification channel: env.SLACK_CHANNEL,
                                        environment: env.ENV_NAME,
                                        version: "${DOCKER_TAG}"
                                }
                            }
                        }

                        stage('PROD') {
                            when {
                                expression { env.TAG_NAME  ==~ /(\d.){2}\d/ }
                                beforeAgent true
                            }

                            environment {
                                ENV_NAME = "prod"

                                DOCKER_REGISTRY_PROTOCOL = "https"
                                DOCKER_REGISTRY = "nexus-docker-msb.df.msb.com.vn"
                                DOCKER_REGISTRY_CREDENTIALS = "rb-upl-svc-nexus"
                                DOCKER_TAG = "${TAG_NAME}"

                                CI = false
                            }

                            stages {
                                stage('package') {
                                    steps {
                                configFileProvider([configFile(fileId: 'npm-global-settings', targetLocation: '.npmrc')]) {
                                    sh "npm rebuild node-sass"
                                    sh "npm run build:prod"
                                }

                                        script {
                                            docker.withRegistry("${DOCKER_REGISTRY_PROTOCOL}://${DOCKER_REGISTRY}", DOCKER_REGISTRY_CREDENTIALS) {
                                                image = docker.build("${DOCKER_REGISTRY}/${PROJECT_NAME}/${ENV_NAME}/${DOCKER_IMAGE}:${DOCKER_TAG}")
                                                image.push("${DOCKER_TAG}")
                                                image.push("${ENV_NAME}")
                                            }
                                        }
                                    }
                                }
                            }

                            post {
                                always {
                                    sendSlackDeploymentNotification channel: env.SLACK_CHANNEL,
                                        environment: env.ENV_NAME,
                                        version: env.GIT_COMMIT
                                }
                            }
                        }
                    }
                }
            }
        }

        stage("PROD deployment") {
            when {
                expression { env.TAG_NAME  ==~ /(\d.){2}\d/ }
                beforeAgent true
            }

            environment {
                DOCKER_REGISTRY = "nexus-docker-msb.df.msb.com.vn"
                DOCKER_REGISTRY_CREDENTIALS = "rb-upl-svc-nexus"
                ENV_NAME = "prod"
                DOCKER_REGISTRY_PROTOCOL = "https"
                DOCKER_TAG = "${TAG_NAME}"
                CI = false
                // REACT_APP_API_URI = "https://rb-api.${ENV_NAME}.df.msb.com.vn/"
            }

            stages {
                stage('PROD') {
                    stages {
                        stage('package') {
                            steps {
                                configFileProvider([configFile(fileId: 'npm-global-settings', targetLocation: '.npmrc')]) {
                                    sh "npm rebuild node-sass"
                                    sh "npm run build:prod"
                                }

                                script {
                                    docker.withRegistry("${DOCKER_REGISTRY_PROTOCOL}://${DOCKER_REGISTRY}", DOCKER_REGISTRY_CREDENTIALS) {
                                        image = docker.build("${DOCKER_REGISTRY}/${PROJECT_NAME}/${ENV_NAME}/${DOCKER_IMAGE}:${DOCKER_TAG}")
                                        image.push("${DOCKER_TAG}")
                                        image.push("${ENV_NAME}")
                                    }
                                }
                            }
                        }
                    }

                    post {
                        always {
                            sendSlackDeploymentNotification channel: env.SLACK_CHANNEL,
                                environment: env.ENV_NAME,
                                version: env.GIT_COMMIT
                        }
                    }
                }
            }
        }

    }

    post {
        always {
            cleanWs()
            sh 'docker image prune --all --force --filter "until=24h"'
        }
    }
}
